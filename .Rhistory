solve_LSAP(x)
solve_LSAP(x, maximum = TRUE)
y <- solve_LSAP(x)
sum(x[cbind(seq_along(y), y)])
}
{
x <- matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
solve_LSAP(x)
solve_LSAP(x, max = TRUE)
y <- solve_LSAP(x)
sum(x[cbind(seq_along(y), y)])
}
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
lp.assign(y,direction="max")
lp.assign(y,direction="max")$solution
library(clue)
{
x <- matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
solve_LSAP(x)
solve_LSAP(x, max = TRUE)
y <- solve_LSAP(x)
sum(x[cbind(seq_along(y), y)])
library(clue)
{
x <- matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
solve_LSAP(x)
solve_LSAP(x, max = TRUE)
y <- solve_LSAP(x)
sum(x[cbind(seq_along(y), y)])
}
library(lpSolve) #Package for linear assignment
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)# defining the matrix
y# print the matrix
lp.assign(y,direction="max")# solving using Hungarian Algorithm
lp.assign(y,direction="max")$solution# Printing the final solution
library(lpSolve) #Package for linear assignment
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)# defining the matrix
y # print the matrix
lp.assign(y,direction="max") # solving using Hungarian Algorithm
lp.assign(y,direction="max")$solution # Printing the final solution
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
lp.assign(y,direction="max")
lp.assign(y,direction="max")$solution
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
lp.assign(y,direction="max")
lp.assign(y,direction="max")$solution
library(lpSolve)
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
lp.assign(y,direction="max")
lp.assign(y,direction="max")$solution
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
# Package for linear assignment problem
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
# Package for linear assignment problem
library(lpSolve)
#Defining the Matrix
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
#Printing the matrix
y
# Package for linear assignment problem
library(lpSolve)
# Defining the Matrix
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
# Printing the matrix
y
# Package for linear assignment problem
library(lpSolve)
# Defining the Matrix
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
# Printing the matrix
y
# Using the function lpassign to solve the matrix
lpassign(y,direction="max"
lpassign(y,direction="max")
lp.assign(y,direction="max")
lp.assign(y,direction="max")$solution
# Package for linear assignment problem
library(lpSolve)
# Defining the Matrix
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
# Printing the matrix
y
# Using the function lpassign to solve the matrix
lp.assign(y,direction="max")
# Printing the results
lp.assign(y,direction="max")$solution
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
lp.assign(y,direction="max")
lp.assign(y,direction="max")$solution
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6) # Defining the Matrix
# Printing the matrix
y
# Using the function lpassign to solve the matrix
lp.assign(y,direction="max")
# Printing the results
lp.assign(y,direction="max")$solution
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6)
y
lp.assign(y,direction="max")
lp.assign(y,direction="max")$solution
library(lpSolve)
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6) # Defining the Matrix
y # Printing the matrix
lp.assign(y,direction="max") # Using the function lpassign to solve the matrix
lp.assign(y,direction="max")$solution # Printing the results
y<-matrix(c(3, 5, 5,4, 5, 4, 4, 4, 3, 4,2,4,4,3,5,4,5,3,2,6,4,5,4,3,3,5,5,4,5,4,6,2,3,2,4,4), nrow = 6) # Defining the Matrix
y # Printing the matrix
lp.assign(y,direction="max") # Using the function lpassign to solve the matrix
lp.assign(y,direction="max")$solution # Printing the results
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages('HSAUR2')
install.packages('HSAUR2')
install.packages("hsaur2")
install.packages("hsaur2")
node app.js
source('~/.active-rstudio-document')
setwd("R:/Program Output VS")
progop<-read.csv('test_sample.csv')
View(progop)
progop<-read.csv('test_sample.csv')
progop.df<-progop[-c(1,2,3,20,21)]
View(progop.df)
View(progop.df)
progop.df<-read.csv('test_sample.csv')
View(progop.df)
colnames(progop.df)[20]="Trip Start Node ID"
colnames(progop.df)[21]="Trip End Node ID"
View(progop.df)
progop.df<-progop.df[-c(1,2,3)]
colnames(progop.df)[1]="Speed Limit"
colnames(progop.df)[2]="Street Length"
View(progop.df)
countID<-plyr::count(progop.df$Trip.ID)
View(countID)
progop.df<-progop.df[order(progop.df$Trip.ID),]
progop.df$Time on the Edge<-0
progop.df["Time on Egde"]<-0
View(progop.df)
countID[(countID$x==progop.df[1,4]),2]
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
else if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
}
View(progop.df)
progop.df["Prev. Edge ID"]<-0
progop.df["Next Edge ID"]<-0
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
}
}
View(progop.df)
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
progop.df[i,21]=progop.df[i-1,3]
}
}
progop.df<-read.csv('test_sample.csv')
progop.df<-progop.df[-c(1,2,3)]
colnames(progop.df)[20]="Trip Start Node ID"
colnames(progop.df)[21]="Trip End Node ID"
colnames(progop.df)[1]="Speed Limit"
colnames(progop.df)[2]="Street Length"
countID<-plyr::count(progop.df$Trip.ID)
progop.df<-progop.df[order(progop.df$Trip.ID),]
progop.df["Time on Egde"]<-0
#extract the avg. time on each edge/street(trip time/number of streets)
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
else if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
}
#Previous Edge ID--------
progop.df["Prev. Edge ID"]<-0
progop.df["Next Edge ID"]<-0
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
progop.df[i,21]=progop.df[i-1,3]
}
}
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
}
}
View(progop.df)
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
View(progop.df)
for (i in 2:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
View(progop.df)
for (i in 2:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
View(progop.df)
progop.df<-read.csv('test_sample.csv')
progop.df<-progop.df[-c(1,2,3)]
colnames(progop.df)[20]="Trip Start Node ID"
colnames(progop.df)[21]="Trip End Node ID"
colnames(progop.df)[1]="Speed Limit"
colnames(progop.df)[2]="Street Length"
countID<-plyr::count(progop.df$Trip.ID)
progop.df<-progop.df[order(progop.df$Trip.ID),]
progop.df["Time on Egde"]<-0
#extract the avg. time on each edge/street(trip time/number of streets)
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
else if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
}
#Previous Edge ID--------
progop.df["Prev. Edge ID"]<-0
progop.df["Next Edge ID"]<-0
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
}
}
for (i in 2:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
View(progop.df)
progop.df$pickup_datetime
progop.df$pickup_datetime[1]
progop.df$pickup_datetime[1,2]
progop.df$pickup_datetime[1]
str(progop.df)
progop.df<-as.Date(progop.df$pickup_datetime,"%d/%m/%Y %H:%M")
#Importing and cleaning data--------------
progop.df<-read.csv('test_sample.csv')
progop.df<-progop.df[-c(1,2,3)]
colnames(progop.df)[20]="Trip Start Node ID"
colnames(progop.df)[21]="Trip End Node ID"
colnames(progop.df)[1]="Speed Limit"
colnames(progop.df)[2]="Street Length"
countID<-plyr::count(progop.df$Trip.ID)
progop.df<-progop.df[order(progop.df$Trip.ID),]
progop.df["Time on Egde"]<-0
#Feature extaction and addition-----------------
#extract the avg. time on each edge/street(trip time/number of streets)-----
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
else if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
}
#Previous and next Edge ID----
progop.df["Prev. Edge ID"]<-0
progop.df["Next Edge ID"]<-0
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
}
}
for (i in 2:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
progop.df$pickup_datetime<-as.Date(progop.df$pickup_datetime,"%d/%m/%Y %H:%M")
#Importing and cleaning data--------------
progop.df<-read.csv('test_sample.csv')
progop.df<-progop.df[-c(1,2,3)]
colnames(progop.df)[20]="Trip Start Node ID"
colnames(progop.df)[21]="Trip End Node ID"
colnames(progop.df)[1]="Speed Limit"
colnames(progop.df)[2]="Street Length"
countID<-plyr::count(progop.df$Trip.ID)
progop.df<-progop.df[order(progop.df$Trip.ID),]
progop.df["Time on Egde"]<-0
#Feature extaction and addition-----------------
#extract the avg. time on each edge/street(trip time/number of streets)-----
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
else if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
}
#Previous and next Edge ID----
progop.df["Prev. Edge ID"]<-0
progop.df["Next Edge ID"]<-0
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
}
}
for (i in 2:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
#Weekday/Weekend
progop.df$pickup_datetime<-as.Date(progop.df$pickup_datetime,"%d/%m/%Y %H:%M:%S")
View(progop.df)
?as.Date
progop.df$dropoff_datetime<-as.Date(progop.df$dropoff_datetime,"%d-%m-%Y %H:%M")
#Importing and cleaning data--------------
progop.df<-read.csv('test_sample.csv')
progop.df<-progop.df[-c(1,2,3)]
colnames(progop.df)[20]="Trip Start Node ID"
colnames(progop.df)[21]="Trip End Node ID"
colnames(progop.df)[1]="Speed Limit"
colnames(progop.df)[2]="Street Length"
countID<-plyr::count(progop.df$Trip.ID)
progop.df<-progop.df[order(progop.df$Trip.ID),]
progop.df["Time on Egde"]<-0
#Feature extaction and addition-----------------
#extract the avg. time on each edge/street(trip time/number of streets)-----
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
else if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
}
#Previous and next Edge ID----
progop.df["Prev. Edge ID"]<-0
progop.df["Next Edge ID"]<-0
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
}
}
for (i in 2:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
View(progop.df)
progop.df$pickup_datetime<-as.character(progop.df$pickup_datetime)
progop.df$pickup_datetime<-as.POSIXct.POSIXlt(progop.df$pickup_datetime, format="%d-%m-%Y %H:%M")
progop.df$pickup_datetime<-as.POSIXct(progop.df$pickup_datetime, format="%d-%m-%Y %H:%M")
progop.df$dropoff_datetime<-as.POSIXct(progop.df$dropoff_datetime, format="%Y-%m-%d %H:%M")
str(progop.df)
#Importing and cleaning data--------------
progop.df<-read.csv('test_sample.csv')
progop.df<-progop.df[-c(1,2,3)]
colnames(progop.df)[20]="Trip Start Node ID"
colnames(progop.df)[21]="Trip End Node ID"
colnames(progop.df)[1]="Speed Limit"
colnames(progop.df)[2]="Street Length"
countID<-plyr::count(progop.df$Trip.ID)
progop.df<-progop.df[order(progop.df$Trip.ID),]
progop.df["Time on Egde"]<-0
#Feature extaction and addition-----------------
#extract the avg. time on each edge/street(trip time/number of streets)-----
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
else if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,19]=progop.df[i,14]/countID[(countID$x==progop.df[i,4]),2]
}
}
#Previous and next Edge ID----
progop.df["Prev. Edge ID"]<-0
progop.df["Next Edge ID"]<-0
for (i in 1:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i+1,4]){
progop.df[i,20]=progop.df[i+1,3]
}
}
for (i in 2:nrow(progop.df)){
if (progop.df[i,4]==progop.df[i-1,4]){
progop.df[i,21]=progop.df[i-1,3]
}
}
View(progop.df)
str(progop.df)
progop.df$pickup_datetime<-as.character(progop.df$pickup_datetime)
progop.df$dropoff_datetime<-as.character(progop.df$dropoff_datetime)
str(progop.df)
progop.df$pickup_datetime<-substring(progop.df$pickup_datetime,1,8)
progop.df$dropoff_datetime<-substring(progop.df$dropoff_datetime,1,8)
progop.df<-progop.df[-6]
weekdays(as.Date(progop.df$pickup_datetime))
as.Date(progop.df$pickup_datetime
str(progop.df)
as.Date(progop.df$pickup_datetime)
month(as.Date(progop.df$pickup_datetime)
month(as.Date(progop.df$pickup_datetime))
library(lubridate)
install.packages("lubridate")
library(lubridate)
month(as.Date(progop.df$pickup_datetime))
year(as.Date(progop.df$pickup_datetime))
year(as.Date(progop.df$pickup_datetime,"%d-%m-%y"))
progop.df$pickup_datetime<-as.Date(progop.df$pickup_datetime,"%d-%m-%y")
progop.df$DayofWeek<-weekday(progop.df$pickup_datetime)
progop.df$DayofWeek<-weekdays(progop.df$pickup_datetime)
str(progop.df)
progop.df$DayofWeek<-as.factor(progop.df$DayofWeek)
str(progop.df)
progop.df$month<-month(progop.df$pickup_datetime)
?read.csv
progop.df$Edgespeed<-(progop.df$`Street Length`/progop.df$`Time on Egde`)
weather.df<-read.csv('Weather June.csv')
setwd("C:/Users/Varun Srivastava/Desktop/Rideshare")
weather.df<-read.csv('Weather June.csv')
View(weather.df)
weather.df<-weather.df[,c(3,4,6,10,11,12,13)]
weather.df$DATE<-as.Date(weather.df$DATE,"%d-%m-%y")
str(weather.df)
str(progop.df)
?merge
colnames(progop.df)[5]<-"DATE"
speed.df<-merge(x = progop.df, y = weather.df, by = "DATE", all.x = TRUE)
View(speed.df)
View(speed.df)
speed.df<-speed.df[order(speed.df$EdgeID),]
which(table(speed.df$EdgeID) == max(table(speed.df$EdgeID)))
table(speed.df$EdgeID)
vs<-as.data.frame(table(speed.df$EdgeID))
View(vs)
which(table(speed.df$EdgeID) == max(table(speed.df$EdgeID)))
sample.df<-speed.df[,speed.df$EdgeID=2671]
sample.df<-speed.df[,speed.df$EdgeID==2671]
sample.df<-speed.df[speed.df$EdgeID==2671,]
View(sample.df)
View(progop.df)
View(vs)
sample.df<-speed.df[speed.df$EdgeID==1664,]
speed.df$Edgespeed<-(speed.df$Edgespeed)*2.23
sample.df<-speed.df[speed.df$EdgeID==1664,]
library(ggplot2)
plot1<-ggplot(sample.df, aes(x='TMAX', y='Edgespeed')) +geom_point()
plot1
str(sample.df)
plot1<-ggplot(sample.df, aes(x='TMAX', y='Edgespeed')) +geom_point(size=2, shape=23)
plot1
sample.df$TMAX<-as.numeric(sample.df$TMAX)
plot1<-ggplot(sample.df, aes(x='TMAX', y='Edgespeed')) +geom_point()
plot1
plot(sample.df$Edgespeed,sample.df$TMAX)
plot(sample.df$TMAX,sample.df$Edgespeed)
plot(sample.df$PRCP,sample.df$Edgespeed)
plot(sample.df$DayofWeek,sample.df$Edgespeed)
plot(sample.df$tod,sample.df$Edgespeed)
sample.df$tod<-as.factor(sample.df$tod)
plot(sample.df$tod,sample.df$Edgespeed)
plot(sample.df$startID,sample.df$Edgespeed)
plot(sample.df$endID,sample.df$Edgespeed)
plot(sample.df$fare_amount,sample.df$Edgespeed)
plot(sample.df$speed,sample.df$Edgespeed)
plot(sample.df$TMAX,sample.df$Edgespeed)
plot(sample.df$PRCP,sample.df$Edgespeed)
plot(sample.df$DayofWeek,sample.df$Edgespeed)
sample.df$tod<-as.factor(sample.df$tod)
sample.df$tod<-as.factor(sample.df$tod)
plot(sample.df$tod,sample.df$Edgespeed)
plot(sample.df$startID,sample.df$Edgespeed)
plot(sample.df$fare_amount,sample.df$Edgespeed)
plot(sample.df$speed,sample.df$Edgespeed)
